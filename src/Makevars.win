# IMPORTANT
#
# 1. Use tabs instead of spaces in this file, or make will fail!
#
# 2. In some environments, ~/.cargo/bin might not be included in PATH, so we
#    need to set it when building STATLIB to ensure cargo can be invoked. It is
#    appended to PATH and therefore is only used if cargo is absent from the
#    user's PATH.
#
# 3. `rustc` adds `-lgcc_eh` flags to the compiler, but Rtools' GCC doesn't have
#    `libgcc_eh` due to the compilation settings. So, in order to please the
#    compiler, we need to add empty `libgcc_eh` to the library search paths when
#    building STATLIB.
#
#    For more details, please refer to
#    https://github.com/r-windows/rtools-packages/blob/2407b23f1e0925bbb20a4162c963600105236318/mingw-w64-gcc/PKGBUILD#L313-L316
#
# 4. CARGO_LINKER is provided in Makevars.ucrt for R >= 4.2

TARGET = $(subst 64,x86_64,$(subst 32,i686,$(WIN)))-pc-windows-gnu
TARGET_DIR = ./rust/target
LIBDIR = $(TARGET_DIR)/$(TARGET)/release
STATLIB = $(LIBDIR)/lib_mdrb.a
PKG_LIBS = -L$(LIBDIR) -l_mdrb -lws2_32 -ladvapi32 -luserenv -lbcrypt -lntdll

all: C_clean

$(SHLIB): $(STATLIB)

CARGOTMP = $(CURDIR)/.cargo_tmp

$(STATLIB):
	mkdir -p $(TARGET_DIR)/libgcc_mock && \
	touch $(TARGET_DIR)/libgcc_mock/libgcc_eh.a && \
	export CARGO_HOME=$(CARGOTMP); \
	export CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER="$(CARGO_LINKER)" && \
	export LIBRARY_PATH="$${LIBRARY_PATH};$(CURDIR)/$(TARGET_DIR)/libgcc_mock" && \
	cargo --version && \
	rustc --version && \
	cd rust && \
	sh vendor.sh && \
	test -d vendor || tar -xJf vendor.tar.xz && \
	mkdir -p .cargo && \
	cp config.toml .cargo && \
	cargo build --target=$(TARGET) --lib --release -j 2 --offline

C_clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS)

clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS) $(TARGET_DIR)
